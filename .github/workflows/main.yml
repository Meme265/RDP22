name: Multi RDP with VPN via Tailscale

on:
  workflow_dispatch:

jobs:
  rdp-tailscale-vpn:
    runs-on: windows-latest
    timeout-minutes: 360
    strategy:
      matrix:
        session: [1,2,3,4,5,6,7,8,9,10]

    steps:
    - name: Enable RDP and Firewall
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389

    - name: Create RDP User
      shell: pwsh
      run: |
        $password = "TestPass123!"
        $securePass = ConvertTo-SecureString $password -AsPlainText -Force
        New-LocalUser -Name "rdpsession" -Password $securePass -AccountNeverExpires
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "rdpsession"
        echo "User: rdpsession; Password: $password"

    - name: Install Tailscale
      run: |
        $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
        $installerPath = "$env:TEMP\tailscale.msi"
        Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
        Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
        Remove-Item $installerPath -Force

    - name: Install OpenVPN with retries
      shell: pwsh
      run: |
        $maxRetries = 3
        $retryCount = 0
        while ($retryCount -lt $maxRetries) {
          try {
            choco install openvpn -y
            Write-Host "OpenVPN installed successfully."
            break
          } catch {
            Write-Host "Attempt $($retryCount + 1) failed: $_"
            Start-Sleep -Seconds 10
            $retryCount++
          }
        }
        if ($retryCount -eq $maxRetries) {
          throw "Failed to install OpenVPN after multiple attempts."
        }

    - name: Create example VPN config files
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Path C:\vpn -Force
        @'
        client
        dev tun
        proto udp
        remote japan.vpn.example 1194
        resolv-retry infinite
        nobind
        persist-key
        persist-tun
        remote-cert-tls server
        cipher AES-256-CBC
        auth SHA256
        verb 3
        '@ | Set-Content -Path C:\vpn\japan.ovpn

        @'
        client
        dev tun
        proto udp
        remote thailand.vpn.example 1194
        resolv-retry infinite
        nobind
        persist-key
        persist-tun
        remote-cert-tls server
        cipher AES-256-CBC
        auth SHA256
        verb 3
        '@ | Set-Content -Path C:\vpn\thailand.ovpn

        @'
        client
        dev tun
        proto udp
        remote southafrica.vpn.example 1194
        resolv-retry infinite
        nobind
        persist-key
        persist-tun
        remote-cert-tls server
        cipher AES-256-CBC
        auth SHA256
        verb 3
        '@ | Set-Content -Path C:\vpn\southafrica.ovpn

    - name: Connect to random VPN server
      shell: pwsh
      run: |
        $vpnConfigs = @("C:\\vpn\\japan.ovpn", "C:\\vpn\\thailand.ovpn", "C:\\vpn\\southafrica.ovpn")
        $choice = Get-Random -InputObject $vpnConfigs
        Write-Host "Connecting to VPN config: $choice"
        Start-Process -FilePath "C:\\Program Files\\OpenVPN\\bin\\openvpn.exe" -ArgumentList "--config `"$choice`"" -NoNewWindow

    - name: Connect to Tailscale
      run: |
        $hostName = "gh-runner-${{ matrix.session }}"
        & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$hostName
        $tsIP = $null
        $tries = 0
        while (-not $tsIP -and $tries -lt 20) {
          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          Start-Sleep -Seconds 5
          $tries++
        }
        if (-not $tsIP) {
          Write-Error 'Tailscale IP not assigned, exiting'
          exit 1
        }
        echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

    - name: Show Tailscale IP and Credentials
      run: |
        Write-Host "Session ${{ matrix.session }} Tailscale IP: $env:TAILSCALE_IP"
        Write-Host "RDP User: rdpsession"
        Write-Host "RDP Password: TestPass123!"

    - name: Keep runner alive continuously
      shell: pwsh
      run: |
        while ($true) {
          Start-Sleep -Seconds 5
        }
