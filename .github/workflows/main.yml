name: Multi RDP with Proxy

on:
  workflow_dispatch:

jobs:
  rdp-proxy:
    runs-on: windows-latest
    timeout-minutes: 360
    strategy:
      matrix:
        proxy_index: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                      21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,
                      40,41,42,43,44,45,46,47,48,49] # Adjust based on your proxies count

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Read proxy and credentials
      id: pick_proxy
      shell: pwsh
      env:
        proxy_index: ${{ matrix.proxy_index }}
      run: |
        $proxies = Get-Content proxies.txt
        Write-Host "Proxy lines: $($proxies.Count)"
        Write-Host "Proxy index: $env:proxy_index"
        if (-not $env:proxy_index) {
          Write-Host "proxy_index is not set!"
          exit 1
        }
        $idx = [int]$env:proxy_index
        if ($idx -ge $proxies.Count) {
          Write-Host "proxy_index $idx is out of range. Only $($proxies.Count) proxies available."
          exit 1
        }
        $line = $proxies[$idx].Trim()
        $split = $line -split "\s+"
        $ipport = $split[0]
        $userpass = $split[1]
        Write-Host "IPPort: $ipport"
        Write-Host "UserPass: $userpass"
        echo "iproxy=$ipport" >> $env:GITHUB_OUTPUT
        echo "uproxy=$userpass" >> $env:GITHUB_OUTPUT

    - name: Set proxy environment variables
      shell: pwsh
      run: |
        $ipport = "${{ steps.pick_proxy.outputs.iproxy }}"
        $userpass = "${{ steps.pick_proxy.outputs.uproxy }}"
        $proxyUri = "http://$userpass@$ipport"
        Write-Host "Setting proxy to $proxyUri"
        [Environment]::SetEnvironmentVariable('http_proxy', $proxyUri, [EnvironmentVariableTarget]::Machine)
        [Environment]::SetEnvironmentVariable('https_proxy', $proxyUri, [EnvironmentVariableTarget]::Machine)

    - name: Enable RDP and Firewall
      shell: pwsh
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389

    - name: Create RDP User
      shell: pwsh
      run: |
        $password = "TestPass123!"
        $securePass = ConvertTo-SecureString $password -AsPlainText -Force
        New-LocalUser -Name "rdpsession" -Password $securePass -AccountNeverExpires
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "rdpsession"
        echo "User: rdpsession; Password: $password"

    - name: Install Tailscale
      run: |
        $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
        $installerPath = "$env:TEMP\tailscale.msi"
        Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
        Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
        Remove-Item $installerPath -Force

    - name: Connect to Tailscale
      shell: pwsh
      env:
        proxy_index: ${{ matrix.proxy_index }}
        TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
      run: |
        $hostName = "gh-runner-$env:proxy_index"
        & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=$hostName
        $tsIP = $null
        $tries = 0
        while (-not $tsIP -and $tries -lt 20) {
          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          Start-Sleep -Seconds 5
          $tries++
        }
        if (-not $tsIP) {
          Write-Error 'Tailscale IP not assigned, exiting'
          exit 1
        }
        echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

    - name: Show Tailscale IP and Credentials
      shell: pwsh
      run: |
        Write-Host "Session $env:proxy_index Tailscale IP: $env:TAILSCALE_IP"
        Write-Host "RDP User: rdpsession"
        Write-Host "RDP Password: TestPass123!"

    - name: Keep runner alive
      shell: pwsh
      run: |
        while ($true) {
          Start-Sleep -Seconds 5
        }
