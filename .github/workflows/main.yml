name: Multi RDP with Local Proxy Enabled (10 Sessions)

on:
  workflow_dispatch:

jobs:
  multi-rdp:
    runs-on: windows-latest
    timeout-minutes: 360
    strategy:
      matrix:
        proxy_index: [0,1,2,3,4,5,6,7,8,9]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Read proxy from proxies.txt (format: ip:port:user:pass)
      - name: Read Proxy from File
        id: proxy
        shell: pwsh
        env:
          PROXY_INDEX: ${{ matrix.proxy_index }}
        run: |
          $proxies = Get-Content proxies.txt
          $index = [int]$env:PROXY_INDEX
          if ($index -ge $proxies.Count) { throw "proxy_index out of range" }

          $line = $proxies[$index].Trim()
          $parts = $line -split ':'
          if ($parts.Length -ne 4) { throw "Invalid proxy line format. Must be ip:port:user:pass" }

          echo "IPPORT=$($parts[0]):$($parts[1])" >> $env:GITHUB_ENV
          echo "USERPASS=$($parts[2]):$($parts[3])" >> $env:GITHUB_ENV

      # Enable RDP + Firewall
      - name: Enable RDP and Firewall
        shell: pwsh
        run: |
          Set-ItemProperty 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name fDenyTSConnections -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389

      # Create RDP User
      - name: Create RDP User
        shell: pwsh
        run: |
          $password = "TestPass123!"
          $secure = ConvertTo-SecureString $password -AsPlainText -Force
          if (!(Get-LocalUser -Name "rdpsession" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "rdpsession" -Password $secure -AccountNeverExpires
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member "rdpsession"
          }
          Write-Host "‚úÖ RDP user 'rdpsession' ready. Password: TestPass123!"

      # Install Tailscale (no proxy ‚Äî direct)
      - name: Install Tailscale
        shell: pwsh
        run: |
          Write-Host "‚¨áÔ∏è Installing Tailscale (direct, no proxy)..."
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $out = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $out -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList "/i `"$out`" /quiet /norestart" -Wait
          Remove-Item $out
          Write-Host "‚úÖ Tailscale installed successfully."

      # Connect to Tailscale network
      - name: Connect to Tailscale
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
          PROXY_INDEX: ${{ matrix.proxy_index }}
        run: |
          $hostname = "gh-rdp-$env:PROXY_INDEX"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=$hostname
          $ip = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          Write-Host "üåê Connected to Tailscale with IP: $ip"

      # Apply proxy inside the Windows environment (for browsers / system)
      - name: Apply Proxy in Windows
        shell: pwsh
        env:
          IPPORT: ${{ env.IPPORT }}
          USERPASS: ${{ env.USERPASS }}
        run: |
          Write-Host "‚öôÔ∏è Setting proxy for Windows: $env:IPPORT"
          $proxyUri = $env:IPPORT
          $userpass = $env:USERPASS -split ':'
          $user = $userpass[0]
          $pass = $userpass[1]

          Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings" -Name ProxyEnable -Value 1
          Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings" -Name ProxyServer -Value $proxyUri
          Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings" -Name ProxyOverride -Value "<local>"

          cmdkey /add:$($proxyUri.Split(':')[0]) /user:$user /pass:$pass

          Add-Type -TypeDefinition @"
            using System;
            using System.Runtime.InteropServices;
            public static class ProxyHelper {
                [DllImport("wininet.dll", SetLastError = true)]
                public static extern bool InternetSetOption(IntPtr hInternet, int dwOption, IntPtr lpBuffer, int dwBufferLength);
                public static void Refresh() {
                    const int INTERNET_OPTION_SETTINGS_CHANGED = 39;
                    const int INTERNET_OPTION_REFRESH = 37;
                    InternetSetOption(IntPtr.Zero, INTERNET_OPTION_SETTINGS_CHANGED, IntPtr.Zero, 0);
                    InternetSetOption(IntPtr.Zero, INTERNET_OPTION_REFRESH, IntPtr.Zero, 0);
                }
            }
          "@

          [ProxyHelper]::Refresh()
          Write-Host "‚úÖ Proxy applied for Windows session."

      # Output session info
      - name: Show Session Info
        shell: pwsh
        run: |
          Write-Host "üñ•Ô∏è Session index: $env:PROXY_INDEX"
          Write-Host "üåê Proxy: $env:IPPORT"
          Write-Host "üë§ RDP User: rdpsession"
          Write-Host "üîë Password: TestPass123!"
          Write-Host "‚úÖ Tailscale IP: $(Get-Command "$env:ProgramFiles\Tailscale\tailscale.exe" | ForEach-Object { & $_.Source ip -4 })"

      # Keep runner alive
      - name: Keep Alive
        shell: pwsh
        run: |
          Write-Host "‚è≥ Keeping RDP session alive..."
          while ($true) { Start-Sleep -Seconds 10 }
